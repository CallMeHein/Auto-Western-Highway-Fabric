plugins {
    id 'fabric-loom' version '1.8-SNAPSHOT'
    id 'maven-publish'
}

// Check if the 'minecraft_version' property is set, or throw an error
if (!project.hasProperty('minecraft_version')) {
    throw new GradleException("The 'minecraft_version' property is required. Please specify it using '-Pminecraft_version=VERSION'")
}
File versionPropertiesFile = file("versions/${minecraft_version}.properties") as File
if (!versionPropertiesFile.exists()) {
    throw new GradleException("File " + versionPropertiesFile.getAbsolutePath() + " does not exist")
}
Properties versionProperties = new Properties()
versionProperties.load(new FileInputStream(versionPropertiesFile))
String minecraft_version = versionProperties.getProperty("minecraft_version")
String yarn_mappings = versionProperties.getProperty("yarn_mappings")
String loader_version = versionProperties.getProperty("loader_version")
String fabric_version = versionProperties.getProperty("fabric_version")
String baritone_version = versionProperties.getProperty("baritone_version")

version = "${project.mod_version}-mc${minecraft_version}"
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    flatDir {
        dirs "./lib"
    }

    maven {
        name = 'babbaj-repo'
        url = 'https://babbaj.github.io/maven/'
    }
}

def urlFile = { url, name, version ->
    File file = new File("$rootDir/lib/${name}-${version}.jar")
    file.parentFile.mkdirs()
    if (!file.exists()) {
        new URL(url).withInputStream { downloadStream ->
            file.withOutputStream { fileOut ->
                fileOut << downloadStream
            }
        }
    }
    return [name: name, version: version]
}


dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    // Baritone
    modImplementation urlFile("https://github.com/cabaletta/baritone/releases/download/v${baritone_version}/baritone-api-fabric-${baritone_version}.jar", 'baritone', "${minecraft_version}-${baritone_version}")
    // Dependencies of Baritone
    implementation "dev.babbaj:nether-pathfinder:1.5"

}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}